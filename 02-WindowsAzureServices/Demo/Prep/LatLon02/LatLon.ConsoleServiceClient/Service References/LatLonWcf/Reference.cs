//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LatLon.ConsoleServiceClient.LatLonWcf {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://BretStateham.com/samples/2013/10/LatLon", ConfigurationName="LatLonWcf.ILatLonUtilitiesService")]
    public interface ILatLonUtilitiesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/RadiansBet" +
            "weenToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/RadiansBet" +
            "weenToPointsResponse")]
        double RadiansBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/RadiansBet" +
            "weenToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/RadiansBet" +
            "weenToPointsResponse")]
        System.Threading.Tasks.Task<double> RadiansBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/NauticalMi" +
            "lesBetweenToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/NauticalMi" +
            "lesBetweenToPointsResponse")]
        double NauticalMilesBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/NauticalMi" +
            "lesBetweenToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/NauticalMi" +
            "lesBetweenToPointsResponse")]
        System.Threading.Tasks.Task<double> NauticalMilesBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/Kilometers" +
            "BetweenToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/Kilometers" +
            "BetweenToPointsResponse")]
        double KilometersBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/Kilometers" +
            "BetweenToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/Kilometers" +
            "BetweenToPointsResponse")]
        System.Threading.Tasks.Task<double> KilometersBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/MilesBetwe" +
            "enToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/MilesBetwe" +
            "enToPointsResponse")]
        double MilesBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/MilesBetwe" +
            "enToPoints", ReplyAction="http://BretStateham.com/samples/2013/10/LatLon/ILatLonUtilitiesService/MilesBetwe" +
            "enToPointsResponse")]
        System.Threading.Tasks.Task<double> MilesBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILatLonUtilitiesServiceChannel : LatLon.ConsoleServiceClient.LatLonWcf.ILatLonUtilitiesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LatLonUtilitiesServiceClient : System.ServiceModel.ClientBase<LatLon.ConsoleServiceClient.LatLonWcf.ILatLonUtilitiesService>, LatLon.ConsoleServiceClient.LatLonWcf.ILatLonUtilitiesService {
        
        public LatLonUtilitiesServiceClient() {
        }
        
        public LatLonUtilitiesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LatLonUtilitiesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LatLonUtilitiesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LatLonUtilitiesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double RadiansBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.RadiansBetweenToPoints(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public System.Threading.Tasks.Task<double> RadiansBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.RadiansBetweenToPointsAsync(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public double NauticalMilesBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.NauticalMilesBetweenToPoints(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public System.Threading.Tasks.Task<double> NauticalMilesBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.NauticalMilesBetweenToPointsAsync(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public double KilometersBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.KilometersBetweenToPoints(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public System.Threading.Tasks.Task<double> KilometersBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.KilometersBetweenToPointsAsync(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public double MilesBetweenToPoints(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.MilesBetweenToPoints(Latitude1, Longitude1, Latitude2, Longitude2);
        }
        
        public System.Threading.Tasks.Task<double> MilesBetweenToPointsAsync(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
            return base.Channel.MilesBetweenToPointsAsync(Latitude1, Longitude1, Latitude2, Longitude2);
        }
    }
}
